# docker-compose.yml
services:
  # ======================
  # MySQL
  # ======================
  db:
    image: mysql:8.0
    container_name: docuhub_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}              # user aplikasi, bukan root
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_INITDB_SKIP_TZINFO: 1
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "127.0.0.1:3309:3306"
    networks: [docuhub_network]
    healthcheck:
      test: ["CMD-SHELL", "mysqladmin ping -uroot -p$${MYSQL_ROOT_PASSWORD} --silent"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s

  # ======================
  # PHP-FPM (Laravel)
  # ======================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: docuhub_app
    restart: unless-stopped
    env_file: [.env]
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      LOG_CHANNEL: stderr
    # HANYA mount yang perlu RW (tidak mount root project!)
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    expose:
      - "9000"
    depends_on:
      db:
        condition: service_healthy
    networks: [docuhub_network]
    healthcheck:
      # php-fpm proses harus hidup
      test: ["CMD-SHELL", "pgrep php-fpm || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 5

  # ----------------------
  # Init permissions (run once, lalu exit sukses)
  # ----------------------
  init_perms:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    depends_on:
      db:
        condition: service_healthy
    env_file: [.env]
    volumes:
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache
    command: >
      sh -lc "
      chown -R www-data:www-data /var/www/html/storage /var/www/html/bootstrap/cache &&
      find /var/www/html/storage -type d -exec chmod 775 {} \; &&
      find /var/www/html/storage -type f -exec chmod 664 {} \; &&
      find /var/www/html/bootstrap/cache -type d -exec chmod 775 {} \; &&
      find /var/www/html/bootstrap/cache -type f -exec chmod 664 {} \;"
    networks: [docuhub_network]
    restart: "no"

  # ----------------------
  # Sinkronisasi aset Vite (copy /public/build dari image → host ./public/build)
  # supaya Nginx bisa melayani file statik tanpa root bind-mount ke app.
  # ----------------------
  assets_sync:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    volumes:
      - ./public:/target-public
    command: >
      sh -lc "
      if [ -d /var/www/html/public/build ]; then
        mkdir -p /target-public &&
        cp -R /var/www/html/public/build /target-public/ 2>/dev/null || true;
      fi"
    networks: [docuhub_network]
    restart: "no"

  # ======================
  # Nginx (sidecar) → proxied oleh Caddy di host 127.0.0.1:9002
  # ======================
  web:
    image: nginx:1.27-alpine
    container_name: docuhub_web
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
      assets_sync:
        condition: service_completed_successfully
      init_perms:
        condition: service_completed_successfully
    volumes:
      # HANYA mount 'public' yang telah berisi build (disalin oleh assets_sync)
      - ./public:/var/www/html/public:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "127.0.0.1:9002:8080"
    networks: [docuhub_network]

  # ======================
  # Queue worker
  # ======================
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: docuhub_queue
    restart: unless-stopped
    env_file: [.env]
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_started
    networks: [docuhub_network]
    working_dir: /var/www/html
    command: >
      sh -lc "php artisan queue:work --sleep=1 --tries=3 --max-time=3600"

  # ======================
  # Scheduler
  # ======================
  schedule:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: docuhub_schedule
    restart: unless-stopped
    env_file: [.env]
    depends_on:
      db:
        condition: service_healthy
      app:
        condition: service_started
    networks: [docuhub_network]
    working_dir: /var/www/html
    command: >
      sh -lc "php artisan schedule:work"

  # ======================
  # phpMyAdmin (hanya localhost host → akses via SSH tunnel / Caddy terproteksi)
  # ======================
  pma:
    image: phpmyadmin:5.2-apache
    container_name: docuhub_pma
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    environment:
      PMA_HOST: db
      PMA_PORT: 3306
      UPLOAD_LIMIT: 256M
      PHP_UPLOAD_MAX_FILESIZE: 256M
      PHP_MAX_INPUT_VARS: 5000
      MEMORY_LIMIT: 512M
    ports:
      - "127.0.0.1:9010:80"
    networks: [docuhub_network]

networks:
  docuhub_network:
    driver: bridge

volumes:
  db_data:
    driver: local

name: Deploy to VPS

on:
  workflow_run:
    workflows: ["Build & Push Image"]
    types: ["completed"]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            set -euo pipefail

            PROJECT_DIR="/home/projectdarma/Monitoring_Notaris_Web"
            COMPOSE_FILE="${PROJECT_DIR}/docker-compose.yml"
            APP_SVC="app"
            DB_SVC="db"
            APP_CONT="docuhub_app"

            echo "===> cd to project"
            cd "$PROJECT_DIR" || { echo "Project dir not found: $PROJECT_DIR"; exit 1; }
            pwd

            # (opsional) sync repo ke branch main
            if [ -d .git ]; then
              git fetch --all --prune || true
              git reset --hard origin/main || true
            fi

            echo "===> Compose services (from $COMPOSE_FILE):"
            SERVICES="$(docker compose -f "$COMPOSE_FILE" config --services)"
            echo "$SERVICES"

            has_service() { echo "$SERVICES" | grep -qx "$1"; }

            echo "===> Pull images"
            docker compose -f "$COMPOSE_FILE" pull "$APP_SVC"
            if has_service "$DB_SVC"; then
              docker compose -f "$COMPOSE_FILE" pull "$DB_SVC" || true
            fi

            # Load .env for DB backup vars (jika ada)
            set -o allexport
            [ -f .env ] && export $(grep -v '^#' .env | xargs -d '\n') || true
            set +o allexport

            if has_service "$DB_SVC"; then
              echo "===> DB backup"
              TS=$(date +%Y%m%d_%H%M%S)
              MYSQL_PWD="${DB_ROOT_PASSWORD:-root}" docker compose -f "$COMPOSE_FILE" exec -T "$DB_SVC" \
                mysqldump -uroot "${DB_DATABASE:-laravel}" > "backup_${TS}.sql" || true
            fi

            echo "===> Up containers (db + app)"
            if has_service "$DB_SVC"; then
              docker compose -f "$COMPOSE_FILE" up -d "$DB_SVC"
            fi
            docker compose -f "$COMPOSE_FILE" up -d "$APP_SVC"

            echo "===> Wait app health"
            APP_DEADLINE=$(( $(date +%s) + 120 ))
            until [ "$(docker inspect -f '{{.State.Health.Status}}' "$APP_CONT" 2>/dev/null || echo starting)" = "healthy" ]; do
              [ "$(date +%s)" -gt "$APP_DEADLINE" ] && { docker compose -f "$COMPOSE_FILE" logs "$APP_SVC" --tail=200 || true; exit 1; }
              sleep 2
            done

            echo "===> Run migrations & setup"
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan migrate --force
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan cache:table || true
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan session:table || true
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan queue:table || true
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan migrate --force
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan storage:link || true
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan cache:clear || true
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan config:clear || true
            docker compose -f "$COMPOSE_FILE" exec -T "$APP_SVC" php artisan config:cache || true

            sudo systemctl reload caddy || true
            docker image prune -af --filter "until=24h" || true
            ls -t backup_*.sql 2>/dev/null | tail -n +6 | xargs rm -f || true

            docker compose -f "$COMPOSE_FILE" ps

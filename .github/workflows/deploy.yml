name: Deploy to VPS

on:
  workflow_run:
    workflows: ["Build & Push Image"]
    types: ["completed"]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            set -euo pipefail

            # === Pretty colors ===
            RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'

            PROJECT_DIR="/home/projectdarma/Monitoring_Notaris_Web"
            APP_SVC="app"
            QUEUE_SVC="queue"
            DB_SVC="db"
            APP_CONT="docuhub_app"
            QUEUE_CONT="docuhub_queue"

            echo -e "${GREEN}===> Starting deployment${NC}"
            cd "$PROJECT_DIR"

            # Muat .env ke shell (untuk backup DB, dsb)
            echo -e "${YELLOW}===> Loading .env into shell${NC}"
            set -o allexport
            if [ -f .env ]; then
              # shellcheck disable=SC2046
              export $(grep -v '^#' .env | xargs -d '\n') || true
            fi
            set +o allexport

            # Diagnostik singkat: tampilkan daftar services dari compose
            echo -e "${YELLOW}===> Docker Compose services detected:${NC}"
            docker compose config --services || true

            echo -e "${YELLOW}===> Pulling latest images (app & queue)${NC}"
            docker compose pull "${APP_SVC}"
            docker compose pull "${QUEUE_SVC}"

            # Backup database (tanpa warning password di CLI)
            if docker compose config --services | grep -qx "${DB_SVC}"; then
              echo -e "${YELLOW}===> Creating database backup${NC}"
              TS=$(date +%Y%m%d_%H%M%S)
              # Hindari warning "Using a password on the command line" dengan MYSQL_PWD
              MYSQL_PWD="${DB_ROOT_PASSWORD:-root}" docker compose exec -T "${DB_SVC}" \
                mysqldump -uroot "${DB_DATABASE:-laravel}" > "backup_${TS}.sql" || true
            else
              echo -e "${YELLOW}DB service not found; skipping backup${NC}"
            fi

            echo -e "${YELLOW}===> Recreating containers (app & queue)${NC}"
            docker compose up -d "${APP_SVC}" "${QUEUE_SVC}"

            echo -e "${YELLOW}===> Waiting for app healthcheck${NC}"
            APP_DEADLINE=$(( $(date +%s) + 120 ))
            until [ "$(docker inspect -f '{{.State.Health.Status}}' ${APP_CONT} 2>/dev/null || echo 'starting')" = "healthy" ]; do
              [ "$(date +%s)" -gt "$APP_DEADLINE" ] && {
                echo -e "${RED}App health check timeout${NC}"
                docker compose logs "${APP_SVC}" --tail=120 || true
                exit 1
              }
              sleep 2
            done

            echo -e "${YELLOW}===> Waiting for queue healthcheck${NC}"
            QUEUE_DEADLINE=$(( $(date +%s) + 120 ))
            until [ "$(docker inspect -f '{{.State.Health.Status}}' ${QUEUE_CONT} 2>/dev/null || echo 'starting')" = "healthy" ]; do
              [ "$(date +%s)" -gt "$QUEUE_DEADLINE" ] && {
                echo -e "${RED}Queue health check timeout${NC}"
                docker compose logs "${QUEUE_SVC}" --tail=120 || true
                exit 1
              }
              sleep 2
            done

            echo -e "${YELLOW}===> Running database migrations${NC}"
            docker compose exec -T "${APP_SVC}" php artisan migrate --force

            echo -e "${YELLOW}===> Ensuring queue tables (idempotent)${NC}"
            docker compose exec -T "${APP_SVC}" php -r "
            try {
              \$dsn = 'mysql:host='.(getenv('DB_HOST')?:'db').';port='.(getenv('DB_PORT')?:'3306').';dbname='.(getenv('DB_DATABASE')?:'laravel');
              \$pdo = new PDO(\$dsn, getenv('DB_USERNAME')?:'root', getenv('DB_PASSWORD')?:'');
              \$tables = array_map('strtolower', array_column(\$pdo->query('SHOW TABLES')->fetchAll(PDO::FETCH_NUM), 0));
              if (!in_array('jobs', \$tables)) {
                passthru('php artisan queue:table', \$code); if (\$code) exit(\$code);
                passthru('php artisan migrate --force', \$code); if (\$code) exit(\$code);
                echo \"Queue tables created\\n\";
              } else {
                echo \"Queue tables already exist\\n\";
              }
            } catch (Throwable \$e) { fwrite(STDERR, \$e->getMessage().\"\\n\"); exit(1); }"

            echo -e "${YELLOW}===> Creating storage symlink (idempotent)${NC}"
            docker compose exec -T "${APP_SVC}" php artisan storage:link || true

            echo -e "${YELLOW}===> Clearing & caching configuration${NC}"
            docker compose exec -T "${APP_SVC}" php artisan cache:clear || true
            docker compose exec -T "${APP_SVC}" php artisan config:clear || true
            docker compose exec -T "${APP_SVC}" php artisan config:cache || true

            echo -e "${YELLOW}===> Reloading Caddy (if present)${NC}"
            sudo systemctl reload caddy || true

            echo -e "${YELLOW}===> Cleaning old Docker images (>24h)${NC}"
            docker image prune -af --filter "until=24h" || true

            echo -e "${YELLOW}===> Keeping only last 5 DB backups${NC}"
            ls -t backup_*.sql 2>/dev/null | tail -n +6 | xargs rm -f || true

            echo -e "${GREEN}===> Deployment completed successfully!${NC}"
            docker compose ps

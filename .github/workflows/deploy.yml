name: Deploy to VPS

on:
  workflow_run:
    workflows: ["Build & Push Image"]
    types: ["completed"]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            set -e
            
            # Color output
            RED='\033[0;31m'
            GREEN='\033[0;32m'
            YELLOW='\033[1;33m'
            NC='\033[0m'
            
            PROJECT_DIR="/home/projectdarma/Monitoring_Notaris_Web"
            
            echo -e "${GREEN}===> Starting deployment${NC}"
            cd $PROJECT_DIR
            
            # Backup database sebelum deploy
            echo -e "${YELLOW}===> Creating database backup${NC}"
            docker compose exec -T db mysqldump \
              -u${DB_USERNAME} -p${DB_PASSWORD} ${DB_DATABASE} \
              > backup_$(date +%Y%m%d_%H%M%S).sql || true
            
            # Pull image terbaru
            echo -e "${YELLOW}===> Pulling latest image from Docker Hub${NC}"
            docker compose pull app
            
            # Stop container lama dengan graceful shutdown
            echo -e "${YELLOW}===> Stopping old container${NC}"
            docker compose stop app
            
            # Start container baru
            echo -e "${YELLOW}===> Starting new container${NC}"
            docker compose up -d app
            
            # Wait for container to be healthy
            echo -e "${YELLOW}===> Waiting for container health check${NC}"
            timeout 60s bash -c 'until docker compose ps app | grep -q "healthy"; do sleep 2; done' || {
              echo -e "${RED}Container health check failed${NC}"
              docker compose logs app --tail=50
              exit 1
            }
            
            # Run migrations
            echo -e "${YELLOW}===> Running database migrations${NC}"
            docker compose exec -T app php artisan migrate --force
            
            # Storage link (idempotent)
            echo -e "${YELLOW}===> Creating storage symlink${NC}"
            docker compose exec -T app php artisan storage:link
            
            # Clear application cache if needed
            echo -e "${YELLOW}===> Clearing application cache${NC}"
            docker compose exec -T app php artisan cache:clear
            docker compose exec -T app php artisan config:cache
            
            # Reload Caddy
            echo -e "${YELLOW}===> Reloading Caddy${NC}"
            sudo systemctl reload caddy
            
            # Cleanup old images
            echo -e "${YELLOW}===> Cleaning up old Docker images${NC}"
            docker image prune -af --filter "until=24h"
            
            # Keep only last 5 database backups
            echo -e "${YELLOW}===> Cleaning old backups${NC}"
            ls -t backup_*.sql 2>/dev/null | tail -n +6 | xargs rm -f || true
            
            echo -e "${GREEN}===> Deployment completed successfully!${NC}"
            
            # Show container status
            docker compose ps
            
      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed! Check the logs above."
          exit 1
name: Deploy to VPS

on:
  workflow_run:
    workflows: ["Build & Push Image"]
    types: ["completed"]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script_stop: true
          script: |
            set -euo pipefail

            # Color output
            RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; NC='\033[0m'

            PROJECT_DIR="/home/projectdarma/Monitoring_Notaris_Web"
            cd "$PROJECT_DIR"

            echo -e "${YELLOW}===> Loading .env into shell (for backup)${NC}"
            # Export var dari .env agar bisa dipakai di perintah shell berikutnya
            set -o allexport
            if [ -f .env ]; then
              # shellcheck disable=SC2046
              export $(grep -v '^#' .env | xargs -d '\n') || true
            fi
            set +o allexport

            echo -e "${GREEN}===> Starting deployment${NC}"

            # Pull image terbaru (mengikuti tag di compose)
            echo -e "${YELLOW}===> Pulling latest image${NC}"
            docker compose pull app

            # Backup database sebelum deploy (idempotent)
            if docker compose ps db >/dev/null 2>&1; then
              echo -e "${YELLOW}===> Creating database backup${NC}"
              TS=$(date +%Y%m%d_%H%M%S)
              docker compose exec -T db mysqldump -uroot -p"${DB_ROOT_PASSWORD:-root}" "${DB_DATABASE:-laravel}" > "backup_${TS}.sql" || true
            fi

            # Stop + start app (graceful rollout)
            echo -e "${YELLOW}===> Restarting app container${NC}"
            docker compose up -d app

            # Tunggu sampai sehat (pakai docker inspect Health)
            echo -e "${YELLOW}===> Waiting for app healthcheck${NC}"
            TIMEOUT_AT=$(( $(date +%s) + 60 ))
            until [ "$(docker inspect -f '{{.State.Health.Status}}' docuhub_app 2>/dev/null || echo 'starting')" = "healthy" ]; do
              [ "$(date +%s)" -gt "$TIMEOUT_AT" ] && { echo -e "${RED}Health check timeout${NC}"; docker compose logs app --tail=80; exit 1; }
              sleep 2
            done

            # Migrasi + storage link + cache
            echo -e "${YELLOW}===> Running migrations${NC}"
            docker compose exec -T app php artisan migrate --force

            echo -e "${YELLOW}===> Creating storage symlink${NC}"
            docker compose exec -T app php artisan storage:link || true

            echo -e "${YELLOW}===> Clearing/recaching config${NC}"
            docker compose exec -T app php artisan cache:clear || true
            docker compose exec -T app php artisan config:clear || true
            docker compose exec -T app php artisan config:cache || true

            # Reload Caddy (opsional, kalau kamu reverse proxy via Caddy host)
            echo -e "${YELLOW}===> Reloading Caddy (if installed)${NC}"
            sudo systemctl reload caddy || true

            # Cleanup images lama (hemat disk)
            echo -e "${YELLOW}===> Cleaning up old Docker images${NC}"
            docker image prune -af --filter "until=24h" || true

            # Simpan hanya 5 backup terakhir
            echo -e "${YELLOW}===> Cleaning old backups${NC}"
            ls -t backup_*.sql 2>/dev/null | tail -n +6 | xargs rm -f || true

            echo -e "${GREEN}===> Deployment completed successfully!${NC}"
            docker compose ps

      - name: Notify on failure
        if: failure()
        run: |
          echo "Deployment failed! Check the logs above."
          exit 1

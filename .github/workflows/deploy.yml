name: Deploy to VPS (Caddy host, DB cache/session/queue)

on:
  workflow_run:
    workflows: ["Build & Push Image (Docker Hub)"]
    types: ["completed"]
    branches: ["main"]

jobs:
  deploy:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest

    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          port: ${{ secrets.VPS_PORT }}
          script: |
            set -e
            cd /home/ubuntu/projectdarma/docuhub

            echo "===> Muat variabel .env agar bisa dipakai di shell"
            # export seluruh key .env ke environment shell saat ini
            set -a
            source .env
            set +a

            echo "===> Update source code"
            git fetch --all
            git reset --hard origin/main

            echo "===> Pull image terbaru & naikkan stack (agar service app/db aktif)"
            docker compose pull
            docker compose up -d

            echo "===> Composer install (dalam container app: ext-intl tersedia)"
            docker compose exec -T app composer install --no-dev --prefer-dist --no-interaction --optimize-autoloader

            echo "===> Build aset frontend (Node Debian/glibc + clean install)"
            docker run --rm -v "$PWD":/app -w /app \
              node:20-bookworm bash -lc '
                set -e
                echo "Node: $(node --version) | npm: $(npm --version)"
                rm -rf node_modules package-lock.json
                npm cache clean --force
                npm install --include=optional
                # Jika masih gagal karena Rollup native, aktifkan fallback JS:
                # export ROLLUP_SKIP_NODEJS=true
                npm run build
              '

            echo "===> Helper cek tabel di MySQL"
            # fungsi bash untuk cek apakah tabel ada di DB
            check_table_exists () {
              TBL="$1"
              docker compose exec -T db sh -lc "mysql -uroot -p\"$DB_ROOT_PASSWORD\" -Nse \"SELECT 1 FROM information_schema.tables WHERE table_schema='${DB_DATABASE}' AND table_name='${TBL}' LIMIT 1;\"" >/dev/null 2>&1
            }

            echo "===> Tangani migration untuk cache/session/queue (idempotent)"
            # 1) sessions
            if check_table_exists "sessions"; then
              echo "-> Tabel 'sessions' SUDAH ada. Hapus file migration agar tidak dijalankan."
              rm -f database/migrations/*_create_sessions_table.php || true
            else
              if ! compgen -G "database/migrations/*_create_sessions_table.php" > /dev/null; then
                echo "-> Generate migration sessions:table (tabel belum ada & file belum ada)"
                docker compose exec -T app php artisan session:table
              else
                echo "-> File migration sessions ada, tabel belum ada: lanjut migrate nanti"
              fi
            fi

            # 2) cache
            if check_table_exists "cache"; then
              echo "-> Tabel 'cache' SUDAH ada. Hapus file migration agar tidak dijalankan."
              rm -f database/migrations/*_create_cache_table.php || true
            else
              if ! compgen -G "database/migrations/*_create_cache_table.php" > /dev/null; then
                echo "-> Generate migration cache:table (tabel belum ada & file belum ada)"
                docker compose exec -T app php artisan cache:table
              else
                echo "-> File migration cache ada, tabel belum ada: lanjut migrate nanti"
              fi
            fi

            # 3) jobs & failed_jobs
            if check_table_exists "jobs"; then
              echo "-> Tabel 'jobs' SUDAH ada. Hapus file migration agar tidak dijalankan."
              rm -f database/migrations/*_create_jobs_table.php || true
            else
              if ! compgen -G "database/migrations/*_create_jobs_table.php" > /dev/null; then
                echo "-> Generate migration queue:table (tabel jobs/failed_jobs belum ada & file belum ada)"
                docker compose exec -T app php artisan queue:table
              else
                echo "-> File migration jobs ada, tabel belum ada: lanjut migrate nanti"
              fi
            fi

            echo "===> Jalankan migrasi (setelah sinkron file/tabel)"
            docker compose exec -T app php artisan migrate --force

            echo "===> Artisan lainnya"
            docker compose exec -T app php artisan optimize:clear
            docker compose exec -T app php artisan storage:link || true

            echo "===> (Opsional) Tampilkan APP_KEY jika pertama kali"
            docker compose exec -T app php artisan key:generate --show || true

            echo "===> Reload Caddy host & cleanup"
            sudo systemctl reload caddy || true
            docker image prune -f

            echo "===> Deploy selesai"

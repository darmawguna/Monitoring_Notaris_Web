# docker-compose.yml
services:
  # ======================
  # MySQL
  # ======================
  db:
    image: mysql:8.0
    container_name: docuhub_db
    restart: unless-stopped
    environment:
      MYSQL_DATABASE: ${DB_DATABASE}
      MYSQL_USER: ${DB_USERNAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
      MYSQL_INITDB_SKIP_TZINFO: 1
    command:
      - --default-authentication-plugin=mysql_native_password
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    volumes:
      - db_data:/var/lib/mysql
    ports:
      - "127.0.0.1:3309:3306"
    networks: [docuhub_network]
    healthcheck:
      # Menggunakan mysql client untuk healthcheck yang lebih aman dan andal
      test: ["CMD", "mysql", "-h", "127.0.0.1", "-u", "${DB_USERNAME}", "-p${DB_PASSWORD}", "-e", "SELECT 1"]
      interval: 10s
      timeout: 5s
      retries: 20
      start_period: 20s # Start period yang lebih realistis

  # ======================
  # PHP-FPM (Laravel)
  # ======================
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: docuhub_app
    restart: unless-stopped
    env_file: [.env]
    environment:
      APP_ENV: production
      APP_DEBUG: "false"
      LOG_CHANNEL: stderr
    # Mount hanya storage yang butuh persistensi. Kode dan aset sudah ada di dalam image.
    volumes:
      - ./storage/app/public:/var/www/html/storage/app/public
      - app_code:/var/www/html
      - ./storage/logs:/var/www/html/storage/logs
      - ./docker/php/zz-fpm.conf:/usr/local/etc/php-fpm.d/zz-fpm.conf:ro
    expose:
      - "9000"
    depends_on:
      db:
        condition: service_healthy
    networks: [docuhub_network]

  # ======================
  # Nginx
  # ======================
  web:
    image: nginx:1.27-alpine
    container_name: docuhub_web
    restart: unless-stopped
    depends_on:
      app:
        condition: service_started
    volumes:
      # Mount public directory dari image (readonly)
      # - ./public:/var/www/html/public:ro
      - app_code:/var/www/html:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
    ports:
      - "127.0.0.1:9002:8080"
    networks: [docuhub_network]

  # ======================
  # Queue worker
  # ======================
  queue:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: docuhub_queue
    restart: unless-stopped
    env_file: [.env]
    depends_on:
      db:
        condition: service_healthy
    networks: [docuhub_network]
    working_dir: /var/www/html
    volumes:
      # Mount storage (RW) dan cache (RO)
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache:ro
    # Perintah worker yang lebih andal
    command: php artisan queue:work --sleep=3 --tries=3 --max-jobs=1000 --max-time=3600

  # ======================
  # Scheduler
  # ======================
  schedule:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: docuhub_schedule
    restart: unless-stopped
    env_file: [.env]
    depends_on:
      db:
        condition: service_healthy
    networks: [docuhub_network]
    working_dir: /var/www/html
    volumes:
      # Mount storage (RW) dan cache (RO)
      - ./storage:/var/www/html/storage
      - ./bootstrap/cache:/var/www/html/bootstrap/cache:ro
    # Menggunakan loop untuk menjalankan scheduler setiap menit, bukan schedule:work
    command: >
      sh -c "while [ true ]; do php artisan schedule:run --verbose --no-interaction & sleep 60; done"


networks:
  docuhub_network:
    driver: bridge

volumes:
  db_data:
    driver: local
  app_code:
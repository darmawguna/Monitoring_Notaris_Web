name: Build & Push Image

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

env:
  IMAGE_NAME: darmawiguna/docuhub
  REGISTRY: docker.io

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver-opts: |
            image=moby/buildkit:latest

      # Debug: Verify required files exist
      - name: Verify project structure
        run: |
          echo "=== Checking required files ==="
          ls -la
          echo ""
          echo "=== Checking composer files ==="
          test -f composer.json && echo "✓ composer.json exists" || echo "✗ composer.json missing"
          test -f composer.lock && echo "✓ composer.lock exists" || echo "✗ composer.lock missing"
          echo ""
          echo "=== Checking package files ==="
          test -f package.json && echo "✓ package.json exists" || echo "✗ package.json missing"
          test -f package-lock.json && echo "✓ package-lock.json exists" || echo "✗ package-lock.json missing"
          echo ""
          echo "=== Checking Dockerfile ==="
          test -f Dockerfile && echo "✓ Dockerfile exists" || echo "✗ Dockerfile missing"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache
          cache-to: type=registry,ref=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:buildcache,mode=max
          platforms: linux/amd64
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}